"use client";
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ConvexClientProvider } from "@/components/ConvexClientProvider";
import Header from "@/components/Header";
import Footer from "@/components/layout/Footer";
import { ClerkProvider } from "@clerk/nextjs";
import SyncUserWithConvex from "@/components/SyncUserWithConvex";
import PrefetchManager from "@/components/PrefetchManager";
import { Toaster } from "sonner";
import { AppProviders } from "@/providers/AppProviders";
import ReservationBanner from "@/components/ReservationBanner";
import { usePathname } from "next/navigation";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const pallyRegular = localFont({
  src: "./fonts/Pally-Regular.otf",
  variable: "--font-pally-regular",
  display: "swap",
});
const pallyMedium = localFont({
  src: "./fonts/Pally-Medium.otf",
  variable: "--font-pally-medium",
  display: "swap",
});
const pallyBold = localFont({
  src: "./fonts/Pally-Bold.otf",
  variable: "--font-pally-bold",
  display: "swap",
});

// Create a client component for conditional rendering
function ConditionalHeaderFooter({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const isDashboard = pathname?.startsWith('/seller');

  return (
    <>
      {!isDashboard && <Header />}
      <SyncUserWithConvex />
      <PrefetchManager />
      {children}
      {!isDashboard && <Footer />}
      <ReservationBanner />
      <Toaster richColors closeButton position="top-right" />
    </>
  );
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${pallyRegular.variable} ${pallyMedium.variable} ${pallyBold.variable} antialiased`}
      >
        <ClerkProvider>
          <AppProviders>
            <ConvexClientProvider>
              <ConditionalHeaderFooter>
                {children}
              </ConditionalHeaderFooter>
            </ConvexClientProvider>
          </AppProviders>
        </ClerkProvider>
      </body>
    </html>
  );
}
