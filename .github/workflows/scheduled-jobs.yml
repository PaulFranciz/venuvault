name: Scheduled Queue Processing

on:
  schedule:
    # Run every 5 minutes (high-frequency for ticket operations)
    - cron: '*/5 * * * *'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Specify which job to run (all, process-tickets, cleanup-reservations, waitlist-processing)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - process-tickets
          - cleanup-reservations
          - waitlist-processing

# Environment variables used by all jobs
env:
  API_BASE_URL: ${{ secrets.VERCEL_URL || 'https://ticwaka.vercel.app' }}
  API_SECRET_TOKEN: ${{ secrets.API_SECRET_TOKEN }}

jobs:
  # Main job to process ticket reservations/purchases (runs every 5 minutes)
  process-tickets:
    name: Process Ticket Queue
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'process-tickets' }}
    
    steps:
      - name: Check API Token
        if: ${{ env.API_SECRET_TOKEN == '' }}
        run: |
          echo "::error::API_SECRET_TOKEN is not set in repository secrets"
          exit 1

      - name: Process Ticket Queue
        uses: actions/github-script@v6
        with:
          script: |
            const MAX_RETRIES = 3;
            const RETRY_DELAY_MS = 3000;
            
            async function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }
            
            async function callApiWithRetry(url, method = 'POST', retries = MAX_RETRIES) {
              try {
                console.log(`Calling ${method} ${url}`);
                
                const response = await fetch(url, {
                  method,
                  headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.API_SECRET_TOKEN
                  }
                });
                
                if (!response.ok) {
                  const text = await response.text();
                  throw new Error(`HTTP error ${response.status}: ${text}`);
                }
                
                const data = await response.json();
                console.log(`Success: ${JSON.stringify(data)}`);
                return data;
              } catch (error) {
                console.error(`Error: ${error.message}`);
                
                if (retries > 0) {
                  console.log(`Retrying in ${RETRY_DELAY_MS/1000} seconds... (${retries} retries left)`);
                  await sleep(RETRY_DELAY_MS);
                  return callApiWithRetry(url, method, retries - 1);
                } else {
                  throw error;
                }
              }
            }
            
            try {
              const baseUrl = process.env.API_BASE_URL;
              const endpoint = '/api/cron/process-queues';
              const url = `${baseUrl}${endpoint}?token=${process.env.API_SECRET_TOKEN}`;
              
              const result = await callApiWithRetry(url);
              console.log('✅ Ticket queue processing completed successfully');
            } catch (error) {
              console.error('❌ Failed to process ticket queue:', error.message);
              process.exit(1);
            }

  # Cleanup job to remove expired reservations (runs every 15 minutes)
  cleanup-reservations:
    name: Cleanup Expired Reservations
    runs-on: ubuntu-latest
    needs: process-tickets
    if: ${{ github.event_name == 'schedule' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'cleanup-reservations' }}
    
    steps:
      - name: Cleanup Expired Reservations
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const baseUrl = process.env.API_BASE_URL;
              const endpoint = '/api/cron/cleanup-reservations';
              const url = `${baseUrl}${endpoint}?token=${process.env.API_SECRET_TOKEN}`;
              
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.API_SECRET_TOKEN
                }
              });
              
              if (!response.ok) {
                const text = await response.text();
                throw new Error(`HTTP error ${response.status}: ${text}`);
              }
              
              const data = await response.json();
              console.log('✅ Expired reservations cleanup completed:', data);
            } catch (error) {
              console.error('❌ Failed to cleanup expired reservations:', error.message);
              // Don't fail the workflow if cleanup fails
            }

  # Process waitlist entries for events that now have availability (runs hourly)
  waitlist-processing:
    name: Process Event Waitlists
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' && github.event.schedule == '0 * * * *' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'waitlist-processing' }}
    
    steps:
      - name: Process Waitlist Entries
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const baseUrl = process.env.API_BASE_URL;
              const endpoint = '/api/cron/process-waitlist';
              const url = `${baseUrl}${endpoint}?token=${process.env.API_SECRET_TOKEN}`;
              
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.API_SECRET_TOKEN
                }
              });
              
              if (!response.ok) {
                const text = await response.text();
                throw new Error(`HTTP error ${response.status}: ${text}`);
              }
              
              const data = await response.json();
              console.log('✅ Waitlist processing completed:', data);
            } catch (error) {
              console.error('❌ Failed to process waitlist:', error.message);
              // Don't fail the workflow if waitlist processing fails
            }

  # Send a Slack notification on failure (only if using schedule)
  notify-on-failure:
    name: Send Failure Notification
    runs-on: ubuntu-latest
    if: ${{ failure() && github.event_name == 'schedule' && secrets.SLACK_WEBHOOK_URL != '' }}
    needs: [process-tickets, cleanup-reservations, waitlist-processing]
    
    steps:
      - name: Send Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: |
            :red_circle: GitHub Actions workflow failed!
            
            Workflow: ${{ github.workflow }}
            Repository: ${{ github.repository }}
            
            See details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
